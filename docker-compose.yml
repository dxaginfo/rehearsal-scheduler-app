version: '3.9'

services:
  # Frontend React application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - '3000:80'
    depends_on:
      - server
    environment:
      - REACT_APP_API_URL=http://localhost:4000/api
    networks:
      - app-network

  # Backend Node.js API
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - '4000:4000'
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/rehearsal_scheduler
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rehearsal_scheduler
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
